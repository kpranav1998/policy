terraform {
  required_providers {
    azurerm = {
      source = "hashicorp/azurerm"
      version = "=2.61.0"
    }
  }
}

# Configure the Microsoft Azure Provider
provider "azurerm" {
  features {}

}
resource "azurerm_policy_definition" "example" {
  name = "policy_unapproved"
  policy_type = "Custom"
  mode = "All"
  display_name = "Audit Resources using unapproved SCDs"

  policy_rule = <<POLICY_RULE
    {
    "if": {
        "anyOf" : [
                {
                  "allOf": [
                              {
                                "field": "[concat('tags.',parameters('tagName'))]",
                                "equals": "Non Production"
                              },
                              {
                                "not": {
                                         "field": "type",
                                         "in": "[parameters('ApprovedResourcesNonProd')]"
                                       }
                              }

                            ]
                },
                {
                  "allOf": [
                              {

                                "field": "[concat('tags.',parameters('tagName'))]",
                                "equals": "Production"
                              },
                              {
                                "not": {
                                         "field": "type",
                                         "in": "[parameters('ApprovedResourcesProd')]"
                                       }
                              }

                            ]
                }
               ]
    },
    "then": {
      "effect": "audit"
    }
  }
POLICY_RULE


  parameters = <<PARAMETERS
    {
    "ApprovedResourcesProd": {
      "type": "Array",
      "metadata": {
        "description": "The list of Approved SCDs for Production",
        "displayName": "Approved SCDs for Production"
      }
    },
    "ApprovedResourcesNonProd": {
      "type": "Array",
      "metadata": {
        "description": "The list of Approved SCDs for Dev",
        "displayName": "Approved SCDs for Dev"
      }
    },
    "tagName": {
            "type": "String",
            "metadata": {
                "description": "Environment",
                "strongType": "tagName"
            }
        }



}
PARAMETERS

}


resource "azurerm_policy_assignment" "example" {
  name = "example-policy-assignment"
  scope = "/subscriptions/da08201d-e47b-46b5-841a-9cf343419302/resourceGroups/Pranav2"
  policy_definition_id = azurerm_policy_definition.example.id
  description = "Audit resources using unapproved SCDs"
  display_name = "Audit resources using unapproved SCDs"

  metadata = <<METADATA
    {
    "category": "General"
    }
METADATA

  parameters = <<PARAMETERS
{
  "ApprovedResourcesProd": {
  "value":["Microsoft.AAD","Microsoft.ApiManagement","Microsoft.Network/applicationGateways","Microsoft.Automation","Microsoft.Network/bastionHosts","Microsoft.Cache/Redis","Microsoft.Cdn","Microsoft.ContainerRegistry","Microsoft.DataFactory","Microsoft.Databricks","Microsoft.DataLakeStore","Microsoft.EventHub","Microsoft.HDInsight","Microsoft.Logic","Microsoft.Sql","Microsoft.DevOps","Microsoft.ServiceBus","Microsoft.KeyVault","Microsoft.Storage/storageAccounts","Microsoft.Network/networkSecurityGroups","Microsoft.Network/virtualNetworks","Microsoft.StreamAnalytics/streamingjobs/functions","Microsoft.Network/privateLinkServices","Microsoft.Network/dnszones","Microsoft.Network/azureFirewalls","Microsoft.Web/staticSites/userProvidedFunctionApps"]
 },

 "ApprovedResourcesNonProd": {
  "value":["Microsoft.AAD","Microsoft.ApiManagement","Microsoft.Network/applicationGateways","Microsoft.Network/bastionHosts","Microsoft.Automation","Microsoft.Cache/Redis","Microsoft.Cdn","Microsoft.ContainerRegistry","Microsoft.Databricks","Microsoft.ContainerRegistry","Microsoft.DataFactory","Microsoft.DataLakeStore","Microsoft.EventHub","Microsoft.HDInsight","Microsoft.Logic","Microsoft.Sql","Microsoft.DevOps","Microsoft.ServiceBus","Microsoft.KeyVault","Microsoft.Storage/storageAccounts","Microsoft.Network/networkSecurityGroups","Microsoft.Network/virtualNetworks","Microsoft.StreamAnalytics/streamingjobs/functions","Microsoft.Network/privateLinkServices","Microsoft.Network/dnszones","Microsoft.Network/azureFirewalls","Microsoft.Web/staticSites/userProvidedFunctionApps"]
 },
 "tagName": {
   "value":"Environment"
        }

}
PARAMETERS

}